const MIN_WITHDRAW_POINTS = 20
const ADMIN_USER_ID = 5919121831
const BOT_TOKEN = "7486908395:AAE394yKNBNxemB3JpnIScly2VE8jsdTVYs"

let watchedAdsCount = Number.parseInt(localStorage.getItem("watchedAdsCount")) || 0
let earnedPoints = Number.parseFloat(localStorage.getItem("earnedPoints")) || 0.0
const pendingReferralBonus = Number.parseFloat(localStorage.getItem("pendingBonus")) || 0.0

// Ensure values are not NaN
if (isNaN(earnedPoints)) {
  earnedPoints = 0.0
  localStorage.setItem("earnedPoints", earnedPoints.toFixed(2))
}
if (isNaN(watchedAdsCount)) {
  watchedAdsCount = 0
  localStorage.setItem("watchedAdsCount", watchedAdsCount)
}

let progressResetTimeout
let countdownInterval

function updateUserData() {
  document.getElementById("watched-ads").textContent = watchedAdsCount
  document.getElementById("earned-points").textContent = earnedPoints.toFixed(2)
  localStorage.setItem("watchedAdsCount", watchedAdsCount)
  localStorage.setItem("earnedPoints", earnedPoints.toFixed(2))
  updateProgressCircle()
}

function updateProgressCircle() {
  const percentage = Math.min((watchedAdsCount / 20) * 100, 100)
  const progressText = document.getElementById("ads-progress")
  const progressCircle = document.querySelector(".progress-circle")
  const progressMessage = document.getElementById("progress-message")

  progressText.textContent = `${percentage.toFixed(0)}%`
  const color = `hsl(${120 - percentage * 1.2}, 100%, 50%)`
  progressCircle.style.background = `conic-gradient(${color} ${percentage}%, #333 ${percentage}% 100%)`
  progressCircle.style.boxShadow = `0 0 15px ${color}`

  if (percentage >= 100) {
    disableAdsForThirtyMinutes()
  } else {
    progressMessage.textContent = ""
  }
}

function disableAdsForThirtyMinutes() {
  document.getElementById("watch-ad-btn").disabled = true
  const messageElement = document.getElementById("progress-message")
  const endTime = Date.now() + 10 * 1000 // 30 minutes timer
  localStorage.setItem("adsDisabledUntil", endTime)
  updateCountdown()
}

function updateCountdown() {
  const messageElement = document.getElementById("progress-message")
  const endTime = Number.parseInt(localStorage.getItem("adsDisabledUntil"))

  clearInterval(countdownInterval)
  countdownInterval = setInterval(() => {
    const remainingTime = endTime - Date.now()
    if (remainingTime > 0) {
      const minutes = Math.floor(remainingTime / (1000 * 60))
      const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000)
      messageElement.textContent = `‚è≥ ${minutes}:${seconds < 10 ? "0" : ""}${seconds} ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®, ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á 1 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡¶® , ‡¶§‡¶æ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ 00 ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá üòäüòä`
    } else {
      messageElement.textContent = "‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!"
      document.getElementById("watch-ad-btn").disabled = false
      localStorage.removeItem("adsDisabledUntil")
      clearInterval(countdownInterval)
      resetProgress()
    }
  }, 1000)
}

function resetProgress() {
  watchedAdsCount = 0
  localStorage.setItem("watchedAdsCount", watchedAdsCount)
  updateProgressCircle()
}

function watchAd() {
  if (typeof show_8887062 === "function") {
    show_8887062()
      .then(() => {
        watchedAdsCount++
        earnedPoints += 0.05
        updateUserData()
      })
      .catch((err) => {
        console.error("Ad loading failed:", err)
        showCustomAlert("Ad loading failed. Please try again.", "error")
      })
  } else {
    showCustomAlert("Ad script not loaded. Try reloading the page.", "error")
  }
}

function withdrawPoints() {
  const amount = Number.parseFloat(document.getElementById("withdraw-amount").value)
  const paymentMethod = document.getElementById("payment-method").value
  const phoneNumber = document.getElementById("withdraw-phone").value
  const name = document.getElementById("your-name").value

  if (amount < MIN_WITHDRAW_POINTS) {
    alert(`‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ${MIN_WITHDRAW_POINTS} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá`)
    return
  }
  if (amount > earnedPoints) {
    alert(`‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§ You have ${earnedPoints.toFixed(2)} Taka.`)
    return
  }

  earnedPoints -= amount
  localStorage.setItem("earnedPoints", earnedPoints.toFixed(2))

  const pendingWithdrawals = JSON.parse(localStorage.getItem("pendingWithdrawals")) || []
  const requestId = Date.now() // ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø

  pendingWithdrawals.push({ id: requestId, name, amount, paymentMethod, phoneNumber, status: "pending" })
  localStorage.setItem("pendingWithdrawals", JSON.stringify(pendingWithdrawals))

  // ‚úÖ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
  const message = `üì¢ ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü!

üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${name}
üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${amount} Taka
üìû ‡¶´‡ßã‡¶®: ${phoneNumber}
üè¶ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°: ${paymentMethod}
üÜî ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø: ${requestId}

‚úÖ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:
/complete_${requestId}
`

  sendWithdrawRequestToAdmin(message)
  alert("‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
}

function refundPendingWithdrawals() {
  const pendingWithdrawals = JSON.parse(localStorage.getItem("pendingWithdrawals")) || []
  const newWithdrawals = []

  pendingWithdrawals.forEach((withdrawal) => {
    if (withdrawal.status === "pending") {
      earnedPoints += withdrawal.amount // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
      localStorage.setItem("earnedPoints", earnedPoints.toFixed(2))
    } else {
      newWithdrawals.push(withdrawal)
    }
  })

  localStorage.setItem("pendingWithdrawals", JSON.stringify(newWithdrawals))
  alert("‚úÖ ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
}

function sendWithdrawRequestToAdmin(message) {
  fetch(
    `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${ADMIN_USER_ID}&text=${encodeURIComponent(message)}`,
  )
    .then((response) => response.json())
    .then((data) => {
      console.log("Admin Response:", data) // ‚úÖ ‡¶≤‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
      if (data.ok) {
        console.log("Message sent to admin")
      } else {
        alert("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")
      }
    })
    .catch((error) => {
      console.error("Error sending message:", error)
      alert("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!")
    })
}

// ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
function generateReferralLink(userId) {
  const botUsername = "free_income_botbot"
  return `https://t.me/${botUsername}?start=${userId}`
}

document.getElementById("referral-btn").addEventListener("click", () => {
  let userId = localStorage.getItem("telegramUserId")

  if (!userId) {
    userId = prompt("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Telegram User ID ‡¶¶‡¶ø‡¶®:")
    if (userId) {
      localStorage.setItem("telegramUserId", userId)
    } else {
      alert("User ID not found! Please restart the bot.")
      return
    }
  }

  const referralLink = generateReferralLink(userId)
  const referralText = document.getElementById("referral-link")

  referralText.textContent = referralLink
  referralText.style.display = "block" // ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá

  // ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶π‡¶¨‡ßá
  referralText.addEventListener("click", () => {
    navigator.clipboard.writeText(referralLink).then(() => {
      referralText.classList.add("copied") // ‡¶ï‡¶™‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
      referralText.textContent = "‚úÖ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
      setTimeout(() => {
        referralText.textContent = referralLink // ‡ß® ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        referralText.classList.remove("copied")
      }, 2000)
    })
  })
})

window.onload = () => {
  updateUserData()
  checkAdsCooldown()

  // Check for referral
  const urlParams = new URLSearchParams(window.location.search)
  const referrerId = urlParams.get("start")
  if (referrerId) {
    localStorage.setItem("referrerId", referrerId)
    showCustomAlert("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®!", "success")
    saveReferralData(referrerId)
    notifyReferrer(referrerId)
  }

  // Check for AdBlock
  setTimeout(() => {
    if (typeof show_8887062 !== "function") {
      showCustomAlert("üö´ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá AdBlock ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ!", "warning")
    }
  }, 3000)
}

function saveReferralData(referrerId) {
  const referrals = JSON.parse(localStorage.getItem(`referrals_${referrerId}`)) || []
  let username = prompt("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Telegram Username ‡¶¶‡¶ø‡¶®:")

  if (!username) {
    username = "Unknown_User"
  }

  referrals.push(username)
  localStorage.setItem(`referrals_${referrerId}`, JSON.stringify(referrals))
}

// ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
function notifyReferrer(referrerId) {
  const message = `üéâ ‡¶è‡¶ï‡¶ú‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!`
  fetch(
    `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${referrerId}&text=${encodeURIComponent(message)}`,
  )
}

// ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
function showReferralList() {
  const userId = localStorage.getItem("telegramUserId")
  const referrals = JSON.parse(localStorage.getItem(`referrals_${userId}`)) || []
  if (referrals.length > 0) {
    alert(`üë• ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n${referrals.join("\\n")}`)
  } else {
    alert("üò¢ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßá‡¶â ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶ø!")
  }
}

document.getElementById("show-referrals-btn").addEventListener("click", showReferralList)

// ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
function withdrawPoints() {
  const amount = Number.parseFloat(document.getElementById("withdraw-amount").value)
  if (amount < MIN_WITHDRAW_POINTS) {
    alert(`‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ${MIN_WITHDRAW_POINTS} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá`)
    return
  }
  if (amount > earnedPoints) {
    alert(`‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§ You have ${earnedPoints.toFixed(2)} Taka.`)
    return
  }

  const referrerId = localStorage.getItem("referrerId")
  if (referrerId) {
    sendReferralBonus(referrerId)
    localStorage.removeItem("referrerId")
  }

  earnedPoints -= amount
  localStorage.setItem("earnedPoints", earnedPoints.toFixed(2))
  alert("‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
}

function sendReferralBonus(referrerId) {
  const message = `üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶ï‡¶ú‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡ß≥2 ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`
  fetch(
    `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${referrerId}&text=${encodeURIComponent(message)}`,
  )
}

function showWithdrawHistory() {
  const pendingWithdrawals = JSON.parse(localStorage.getItem("pendingWithdrawals")) || []
  if (pendingWithdrawals.length === 0) {
    alert("üîç ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶á!")
    return
  }

  let historyText = "üìú ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø:\n"
  pendingWithdrawals.forEach((w, index) => {
    historyText += `${index + 1}. ${w.name} - ${w.amount} Taka - ${w.paymentMethod} - ${w.phoneNumber} - ${w.status === "pending" ? "‚è≥ Pending" : "‚úÖ Completed"}\n`
  })

  alert(historyText)
}

document.getElementById("show-history-btn").addEventListener("click", showWithdrawHistory)

function completeWithdrawal(requestId) {
  const pendingWithdrawals = JSON.parse(localStorage.getItem("pendingWithdrawals")) || []

  const withdrawal = pendingWithdrawals.find((w) => w.id == requestId)
  if (!withdrawal) {
    alert("‚ùå ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")
    return
  }

  withdrawal.status = "completed"
  localStorage.setItem("pendingWithdrawals", JSON.stringify(pendingWithdrawals))

  // ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
  const message = `üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!

üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${withdrawal.amount} Taka
üìû ‡¶´‡ßã‡¶®: ${withdrawal.phoneNumber}
üè¶ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°: ${withdrawal.paymentMethod}
‚úÖ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: Completed`

  fetch(
    `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${withdrawal.phoneNumber}&text=${encodeURIComponent(message)}`,
  )
    .then((response) => response.json())
    .then((data) => console.log("Withdrawal completed message sent:", data))
    .catch((error) => console.error("Error sending completion message:", error))

  alert("‚úÖ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
}

function checkAdsCooldown() {
  let savedEndTime = localStorage.getItem("adsDisabledUntil")
  if (savedEndTime) {
    savedEndTime = Number.parseInt(savedEndTime)
    if (Date.now() < savedEndTime) {
      document.getElementById("watch-ad-btn").disabled = true
      updateCountdown()
    } else {
      localStorage.removeItem("adsDisabledUntil")
    }
  }
}

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("watched-ads").textContent = watchedAdsCount
  document.getElementById("earned-points").textContent = earnedPoints.toFixed(2)
  updateProgressCircle()
  checkAdsCooldown() // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
})

document.getElementById("refund-btn").addEventListener("click", refundPendingWithdrawals)

// Custom alert system
function showCustomAlert(message, type = "info") {
  const alertContainer = document.getElementById("custom-alert-container")
  const alert = document.createElement("div")
  alert.className = `custom-alert ${type}`
  alert.textContent = message
  alertContainer.appendChild(alert)

  setTimeout(() => {
    alert.classList.add("fade-out")
    setTimeout(() => {
      alertContainer.removeChild(alert)
    }, 500)
  }, 3000)
}

// Add event listener for page visibility change
document.addEventListener("visibilitychange", () => {
  if (document.hidden) {
    // Page is hidden, clear the interval
    clearInterval(countdownInterval)
  } else {
    // Page is visible again, restart the countdown if needed
    const savedEndTime = localStorage.getItem("adsDisabledUntil")
    if (savedEndTime && Date.now() < Number.parseInt(savedEndTime)) {
      updateCountdown()
    }
  }
})

document.getElementById("watched-ads").textContent = watchedAdsCount
document.getElementById("earned-points").textContent = earnedPoints.toFixed(2)
updateProgressCircle()

